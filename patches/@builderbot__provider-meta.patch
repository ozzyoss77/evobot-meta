diff --git a/dist/index.cjs b/dist/index.cjs
index 7aad527fc317f6ce42d6520b54bf7b63f0541681..8531dfd66d5c023a27813d3ed879e84f44e920a8 100644
--- a/dist/index.cjs
+++ b/dist/index.cjs
@@ -13066,7 +13066,7 @@ async function getMediaUrl(version, IdMedia, numberId, Token) {
     }
 }
 
-const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, message, to, jwtToken, version, numberId, fileData }) => {
+const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, message, to, jwtToken, version, numberId, fileData, quoted }) => {
     let responseObj;
     switch (message.type) {
         case 'text': {
@@ -13077,6 +13077,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: message.text?.body,
                 name: pushName,
                 pushName,
+                quoted,
             };
             break;
         }
@@ -13095,6 +13096,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                     : undefined,
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13108,6 +13110,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 title_button_reply: message.button?.payload,
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13123,6 +13126,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_media_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13137,6 +13141,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_document_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13152,6 +13157,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_media_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13165,6 +13171,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_location_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13179,6 +13186,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_voice_note_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13191,6 +13199,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_media_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13208,6 +13217,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_contacts_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13223,6 +13233,7 @@ const processIncomingMessage = async ({ messageId, messageTimestamp, pushName, m
                 body: bot.utils.generateRefProvider('_event_order_'),
                 pushName,
                 name: pushName,
+                quoted,
             };
             break;
         }
@@ -13310,6 +13321,7 @@ class MetaCoreVendor extends EventEmitter {
                         [contact] = contacts;
                     const to = body.entry[0].changes[0].value?.metadata?.display_phone_number;
                     const pushName = contact?.profile?.name ?? 'Unknown';
+					const quoted = message?.context?.id ?? null;
                     const fileData = message?.audio ??
                         message?.image ??
                         message?.video ??
@@ -13322,6 +13334,7 @@ class MetaCoreVendor extends EventEmitter {
                         to,
                         pushName,
                         message,
+						quoted,
                         jwtToken,
                         numberId,
                         version,
@@ -13920,6 +13933,27 @@ class MetaProvider extends bot.ProviderClass {
                 body.context = { message_id: context };
             return this.sendMessageMeta(body);
         };
+		this.sendMediaUrl = async (to, type, url, caption = '', filename = '') => {
+			const mediaContent = {
+				link: url,
+			}
+			if (filename) {
+				mediaContent.filename = filename;
+				mediaContent.caption = caption;
+			}
+			if (url === 'image' || url === 'video') {
+				mediaContent.caption = caption;
+			}
+			to = parseMetaNumber(to);
+			const body = {
+				messaging_product: 'whatsapp',
+				recipient_type: 'individual',
+				to,
+				type: type,
+				[type]: mediaContent,
+			}
+			return this.sendMessageMeta(body);
+		};
         this.sendReaction = async (to, react) => {
             to = parseMetaNumber(to);
             const body = {
@@ -13988,7 +14022,7 @@ class MetaProvider extends bot.ProviderClass {
             };
             return this.sendMessageMeta(body);
         };
-        this.sendText = async (to, message, context = null, preview_url = false) => {
+        this.sendText = async (to, message, context = null, preview_url = true) => {
             to = parseMetaNumber(to);
             const body = {
                 messaging_product: 'whatsapp',
diff --git a/dist/interface/meta.d.ts b/dist/interface/meta.d.ts
index bf3841521b5ebc02b9187e99f24829b3c15b2734..3d23cf06570f30ae3c43f502edae887ad0727cc4 100644
--- a/dist/interface/meta.d.ts
+++ b/dist/interface/meta.d.ts
@@ -9,6 +9,7 @@ export interface MetaInterface {
     sendVideo: (to: string, pathVideo: string | null, caption: string, context: string | null) => Promise<any>;
     sendVideoUrl: (to: string, url: string, caption: string, context: string | null) => Promise<void>;
     sendMedia: (to: string, text: string, mediaInput: string, context: string | null) => Promise<any>;
+    sendMediaUrl: (to: string, type: string, url: string, caption: string, filename: string) => Promise<void>;
     sendList: (to: string, list: MetaList) => Promise<any>;
     sendListComplete: (to: string, header: string, text: string, footer: string, button: string, list: Record<string, any>) => Promise<void>;
     sendButtons: (to: string, buttons: Button[], text: string) => Promise<any>;
diff --git a/dist/meta/provider.d.ts b/dist/meta/provider.d.ts
index 7b19c8dbb215d6fda6f03ed897b6411438a72cea..1ea853d0621489550fa92cccecc91dee6126b32d 100644
--- a/dist/meta/provider.d.ts
+++ b/dist/meta/provider.d.ts
@@ -34,6 +34,7 @@ declare class MetaProvider extends ProviderClass<MetaInterface> implements MetaI
     sendVideo: (to: string, pathVideo: any, caption: string, context?: any) => Promise<any>;
     sendVideoUrl: (to: string, url: string, caption?: string, context?: any) => Promise<any>;
     sendMedia: (to: string, text: string, mediaInput: string, context?: any) => Promise<any>;
+    sendMediaUrl: (to: string, type: string, url: string, caption: string, filename: string) => Promise<any>;
     sendList: (to: string, list: MetaList) => Promise<any>;
     sendListComplete: (to: string, header: string, text: string, footer: string, button: string, list: Record<string, any>) => Promise<any>;
     sendButtons: (to: string, buttons: Button[], text: string) => Promise<any>;
